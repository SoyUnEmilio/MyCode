//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CSharpFeatures.Data
{
    public partial class SueType
    {
        #region Primitive Properties
    
        public virtual System.Guid ID
        {
            get;
            set;
        }
    
        public virtual int SysVersion
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> CreatedOn
        {
            get;
            set;
        }
    
        public virtual string CreatedBy
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> UpdatedOn
        {
            get;
            set;
        }
    
        public virtual string UpdatedBy
        {
            get;
            set;
        }
    
        public virtual string Code
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string Pid
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> isBigType
        {
            get;
            set;
        }
    
        public virtual string SueTypeIndex
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Sue> Sues
        {
            get
            {
                if (_sues == null)
                {
                    var newCollection = new FixupCollection<Sue>();
                    newCollection.CollectionChanged += FixupSues;
                    _sues = newCollection;
                }
                return _sues;
            }
            set
            {
                if (!ReferenceEquals(_sues, value))
                {
                    var previousValue = _sues as FixupCollection<Sue>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSues;
                    }
                    _sues = value;
                    var newValue = value as FixupCollection<Sue>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSues;
                    }
                }
            }
        }
        private ICollection<Sue> _sues;

        #endregion
        #region Association Fixup
    
        private void FixupSues(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Sue item in e.NewItems)
                {
                    item.SueType = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Sue item in e.OldItems)
                {
                    if (ReferenceEquals(item.SueType, this))
                    {
                        item.SueType = null;
                    }
                }
            }
        }

        #endregion
    }
}
